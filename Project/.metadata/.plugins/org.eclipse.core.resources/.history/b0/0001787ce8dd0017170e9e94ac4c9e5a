/***************************************************
 This is a library for the MPR121 I2C 12-chan Capacitive Sensor

 Designed specifically to work with the MPR121 sensor from Adafruit
 ----> https://www.adafruit.com/products/1982

 These sensors use I2C to communicate, 2+ pins are required to
 interface
 Adafruit invests time and resources providing this open source code,
 please support Adafruit and open-source hardware by purchasing
 products from Adafruit!

 Written by Limor Fried/Ladyada for Adafruit Industries.
 BSD license, all text above must be included in any redistribution
 ****************************************************/

#include "Adafruit_MPR121.h"


uint8_t begin_MPR121(void){

}
void setThreshold(uint8_t touch, uint8_t release){

}
uint16_t touched(void){

}
uint8_t readRegister8(uint8_t reg){
	uint8_t data;
	while(I2C_GetFlagStatus(MPR121, I2C_FLAG_BUSY));
	I2C_GenerateSTART(MPR121, ENABLE);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_MODE_SELECT));
	I2C_Send7bitAddress(MPR121, MPR121_I2CADDR_DEFAULT, I2C_Direction_Transmitter);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	I2C_SendData(MPR121, reg);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	I2C_GenerateSTART(MPR121, ENABLE);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_MODE_SELECT));
	I2C_Send7bitAddress(MPR121, MPR121_I2CADDR_DEFAULT, I2C_Direction_Receiver);
	while(!I2C_CheckEvent(MPR121,I2C_EVENT_MASTER_BYTE_RECEIVED));
	data = I2C_ReceiveData(MPR121);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_BYTE_RECEIVED));
	I2C_AcknowledgeConfig(MPR121, DISABLE);
	I2C_GenerateSTOP(MPR121, ENABLE);
	while(I2C_GetFlagStatus(MPR121, I2C_FLAG_BUSY));
	return data;
}
uint16_t readRegister16(uint8_t reg){
	uint16_t data = 0;
	int i;
	while(I2C_GetFlagStatus(MPR121, I2C_FLAG_BUSY));
	I2C_GenerateSTART(MPR121, ENABLE);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_MODE_SELECT));
	I2C_Send7bitAddress(MPR121, MPR121_I2CADDR_DEFAULT, I2C_Direction_Transmitter);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	I2C_SendData(MPR121, reg);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	I2C_GenerateSTOP(MPR121, ENABLE);
	I2C_GenerateSTART(MPR121, ENABLE);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_MODE_SELECT));
	I2C_Send7bitAddress(MPR121, MPR121_I2CADDR_DEFAULT, I2C_Direction_Receiver);
	while (!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	I2C_AcknowledgeConfig(MPR121, ENABLE);
	for(i=1; i>=0; i--) {
		I2C_AcknowledgeConfig(MPR121, DISABLE);
		while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_BYTE_RECEIVED));
		data |= I2C_ReceiveData(MPR121) << i*8;
	}
	I2C_AcknowledgeConfig(MPR121, DISABLE);
	I2C_GenerateSTOP(MPR121, ENABLE);
	while(I2C_GetFlagStatus(MPR121, I2C_FLAG_BUSY));
}
void writeRegister(uint8_t reg, uint8_t value){
	I2C_GenerateSTART(MPR121, ENABLE);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_MODE_SELECT));
	I2C_Send7bitAddress(MPR121, MPR121_I2CADDR_DEFAULT, I2C_Direction_Transmitter);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	I2C_SendData(MPR121, reg);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	I2C_SendData(MPR121, value);
	while(!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	I2C_GenerateSTOP(MPR121, ENABLE);
	while(I2C_GetFlagStatus(MPR121, I2C_FLAG_BUSY));
}


