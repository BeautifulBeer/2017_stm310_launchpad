/***************************************************
 This is a library for the MPR121 I2C 12-chan Capacitive Sensor

 Designed specifically to work with the MPR121 sensor from Adafruit
 ----> https://www.adafruit.com/products/1982

 These sensors use I2C to communicate, 2+ pins are required to
 interface
 Adafruit invests time and resources providing this open source code,
 please support Adafruit and open-source hardware by purchasing
 products from Adafruit!

 Written by Limor Fried/Ladyada for Adafruit Industries.
 BSD license, all text above must be included in any redistribution
 ****************************************************/

#include "Adafruit_MPR121.h"

void begin(uint8_t i2caddr) {
	m_i2caddress_init(i2caddr);
	m_i2cbffer_init(BUFFER);
	I2CADDR = i2caddr;

	writeRegister(MPR121_SOFTRESET, 0x63);
	delay(1);

	writeRegister(MPR121_ECR, 0x0);

	uint8_t c = readRegister8(MPR121_CONFIG2);

	if (c != 0x24)
		return;

	setThreshholds(12, 6);
	writeRegister(MPR121_MHDR, 0x01);
	writeRegister(MPR121_NHDR, 0x01);
	writeRegister(MPR121_NCLR, 0x0E);
	writeRegister(MPR121_FDLR, 0x00);

	writeRegister(MPR121_MHDF, 0x01);
	writeRegister(MPR121_NHDF, 0x05);
	writeRegister(MPR121_NCLF, 0x01);
	writeRegister(MPR121_FDLF, 0x00);

	writeRegister(MPR121_NHDT, 0x00);
	writeRegister(MPR121_NCLT, 0x00);
	writeRegister(MPR121_FDLT, 0x00);

	writeRegister(MPR121_DEBOUNCE, 0);
	writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
	writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period

//  writeRegister(MPR121_AUTOCONFIG0, 0x8F);

//  writeRegister(MPR121_UPLIMIT, 150);
//  writeRegister(MPR121_TARGETLIMIT, 100); // should be ~400 (100 shifted)
//  writeRegister(MPR121_LOWLIMIT, 50);
	// enable all electrodes
	writeRegister(MPR121_ECR, 0x8F); // start with first 5 bits of baseline tracking

}

void setThreshholds(uint8_t touch, uint8_t release) {

	setThresholds(touch, release);
}

void setThresholds(uint8_t touch, uint8_t release) {
	uint8_t i = 0;

	for (i = 0; i < 12; i++) {
		writeRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
		writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
	}
}

uint16_t filteredData(uint8_t t) {
	if (t > 12)
		return 0;
	return readRegister16(MPR121_FILTDATA_0L + t * 2);
}

uint16_t baselineData(uint8_t t) {
	uint16_t bl;

	if (t > 12)
		return 0;
	b1 = readRegister8(MPR121_BASELINE_0 + t);
	return (bl << 2);
}

uint16_t touched(void) {
	uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
	return t & 0x0FFF;
}

/*********************************************************************/

uint8_t readRegister8(uint8_t reg) {
	/*
	 Wire.beginTransmission(_i2caddr);
	 Wire.write(reg);
	 Wire.endTransmission(false);
	 while (Wire.requestFrom(_i2caddr, 1) != 1);
	 return ( Wire.read());
	 */

	return MPU6050_I2C_BufferRead(I2CADDR, &BUFFER, reg, 1);
}

uint16_t readRegister16(uint8_t reg) {

	/*
	 Wire.beginTransmission(I2CADDR);
	 Wire.write(reg);
	 Wire.endTransmission(false);
	 while (Wire.requestFrom(_i2caddr, 2) != 2);
	 uint16_t v = Wire.read();
	 v |=  ((uint16_t) Wire.read()) << 8;
	 return v;
	 */

	MPR121_I2C_BufferRead(I2CADDR, &BUFFER, reg, 2);

	return BUFFER;
}

/**************************************************************************/
/*!
 @brief  Writes 8-bits to the specified destination register
 */
/**************************************************************************/
void writeRegister(uint8_t reg, uint8_t value) {

	/*
	 Wire.beginTransmission(_i2caddr);
	 Wire.write((uint8_t)reg);
	 Wire.write((uint8_t)(value));
	 Wire.endTransmission();
	 */

	BUFFER = value;
	MPR121_I2C_ByteWrite(I2CADDR, &BUFFER, reg);
}

void MPR121_I2C_ByteWrite(uint8_t slaveAddr, uint8_t* pBuffer,
		uint8_t writeAddr) {

	/* Send START condition */
	I2C_GenerateSTART(MPR121, ENABLE);

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_MODE_SELECT))
		;

	I2C_Send7bitAddress(MPR121, slaveAddr, I2C_Direction_Transmitter);

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
		;

	/* Send the MPU6050's internal address to write to */
	I2C_SendData(MPR121, writeAddr);

	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
		;

	/* Send the byte to be written */
	I2C_SendData(MPR121, *pBuffer);

	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
		;

	/* Send STOP condition */
	I2C_GenerateSTOP(MPR121, ENABLE);

}

void MPR121_I2C_BufferRead(u8 slaveAddr, u8* pBuffer, u8 readAddr,
		u16 NumByteToRead) {
	// ENTR_CRT_SECTION();

	/* While the bus is busy */
	while (I2C_GetFlagStatus(MPR121, I2C_FLAG_BUSY))
		;

	/* Send START condition */
	I2C_GenerateSTART(MPR121, ENABLE);

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_MODE_SELECT))
		;

	/* Send MPU6050 address for write */
	I2C_Send7bitAddress(MPR121, slaveAddr, I2C_Direction_Transmitter);

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
		;

	/* Clear EV6 by setting again the PE bit */
	I2C_Cmd(MPR121, ENABLE);

	/* Send the MPU6050's internal address to write to */
	I2C_SendData(MPR121, readAddr);

	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
		;

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(MPR121, ENABLE);

	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_MODE_SELECT))
		;

	/* Send MPU6050 address for read */
	I2C_Send7bitAddress(MPR121, slaveAddr, I2C_Direction_Receiver);

	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
		;

	/* While there is data to be read */
	while (NumByteToRead) {
		if (NumByteToRead == 1) {
			/* Disable Acknowledgement */
			I2C_AcknowledgeConfig(MPR121, DISABLE);

			/* Send STOP Condition */
			I2C_GenerateSTOP(MPR121, ENABLE);
		}

		/* Test on EV7 and clear it */
		if (I2C_CheckEvent(MPR121, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
			/* Read a byte from the MPU6050 */
			*pBuffer = I2C_ReceiveData(MPR121);

			/* Point to the next location where the byte read will be saved */
			pBuffer++;

			/* Decrement the read bytes counter */
			NumByteToRead--;
		}
	}

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(MPR121, ENABLE);
//  EXT_CRT_SECTION();

}

void m_i2caddress_init(uint8_t i2caddr_) {
	I2CADDR = i2caddr_;
}

void m_i2cbuffer_init(uint8_t buffer_) {
	BUFFER = buffer_;
}
