/*
 * config_system.c
 *
 *  Created on: 2017. 11. 24.
 *      Author: hw_3
 */

#include "config_system.h"

void m_Init_GPIOA_Clock(void){
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
}

void m_Init_GPIOC_Clock(void){
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
}

void m_Init_USART2_Clock(void){
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
}

void m_Init_USART3_Clock(void){
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3,ENABLE);
}

void m_System_Clock(void){
	volatile uint32_t StartUpCounter = 0, HSEStatus = 0;

	   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
	   /* Enable HSE */
	   RCC->CR |= ((uint32_t)RCC_CR_HSEON);

	   /* Wait till HSE is ready and if Time out is reached exit */
	   do
	   {
	      HSEStatus = RCC->CR & RCC_CR_HSERDY;
	      StartUpCounter++;
	   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

	   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
	   {
	      HSEStatus = (uint32_t)0x01;
	   }
	   else
	   {
	      HSEStatus = (uint32_t)0x00;
	   }

	   if (HSEStatus == (uint32_t)0x01)
	   {
	      /* Enable Prefetch Buffer */
	      FLASH->ACR |= FLASH_ACR_PRFTBE;

	      /* Flash 0 wait state */
	      FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
	      FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;

	      /* HCLK = SYSCLK */
	      RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV2;

	      /* PCLK2 = HCLK */
	      RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV2;

	      /* PCLK1 = HCLK */
	      RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;

	      RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
	      RCC->CFGR |= (uint32_t)( RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL5);


	      RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
	            RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
	      RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
	            RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);

	      /* Enable PLL2 */
	      RCC->CR |= RCC_CR_PLL2ON;
	      /* Wait till PLL2 is ready */
	      while((RCC->CR & RCC_CR_PLL2RDY) == 0)
	      {
	      }

	      /* Enable PLL */
	      RCC->CR |= RCC_CR_PLLON;

	      /* Wait till PLL is ready */
	      while((RCC->CR & RCC_CR_PLLRDY) == 0)
	      {
	      }

	      /* Select PLL as system clock source */
	      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
	      RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;

	      /* Wait till PLL is used as system clock source */
	      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
	      {
	      }
	   }
	   else
	   {
	   }
}
