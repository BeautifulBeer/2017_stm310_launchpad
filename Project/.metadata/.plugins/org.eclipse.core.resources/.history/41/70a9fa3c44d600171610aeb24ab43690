#include "misc.h"
#include "stm32f10x.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_usart.h"
#include "stm32f10x.h"
#include "core_cm3.h"
#include "stm32f10x_exti.h"

GPIO_InitTypeDef GPIO_init;       //GPIO 초기화 변수 선언
USART_InitTypeDef USART_InitStructure;    // USART 초기화 변수 선언
NVIC_InitTypeDef NVIC_init;        // 중첩 인터럽트 처리위한 NVIC 초기화 변수 선언

void RCC_Configuration(void){ /// RCC 설정
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); // RCC APB2의 USART1 enable
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE); // RCC APB1의 USART2 enable
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); // RCC APB2의 GPIOA enable
}

void GPIO_Configuration(void){ /// GPIO 설정

    GPIO_init.GPIO_Pin = GPIO_Pin_2; // PA2 USART2_TX(7) 설정
    GPIO_init.GPIO_Speed = GPIO_Speed_50MHz; // 속도는 50MHz로 설정
    GPIO_init.GPIO_Mode = GPIO_Mode_AF_PP; // GPIO Alternenate function Push-Pull로 설정
    GPIO_Init(GPIOA, &GPIO_init);      // GPIOA 초기화

    //A3 RX
    GPIO_init.GPIO_Pin = GPIO_Pin_3; // PA3 USART2_RX(7) 설정
    GPIO_init.GPIO_Mode = GPIO_Mode_IN_FLOATING; // GPIO input floating 으로 설정
    GPIO_Init(GPIOA, &GPIO_init);         // GPIOA 초기화

    /* Configure the USART1_Tx as Alternate function Push-Pull */
    GPIO_init.GPIO_Pin = GPIO_Pin_9; // PA9 USART1_TX(7) 설정
    GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;        // Speed를 50MHz로 설정
    GPIO_init.GPIO_Mode = GPIO_Mode_AF_PP; //GPIO Alternenate function Push-Pull로 설정
    GPIO_Init(GPIOA, &GPIO_init);    //GPIOA 초기화

    /* Configure the USART1_Rx as input floating */
    GPIO_init.GPIO_Pin = GPIO_Pin_10;          // PA10 USART1_RX(7) 설정
    GPIO_init.GPIO_Mode = GPIO_Mode_IN_FLOATING; // GPIO input floating 으로 설정
    GPIO_Init(GPIOA, &GPIO_init);           //GPIOA 초기화
}

void USART_Configuration(void){ //Usart1 설정

    USART_InitStructure.USART_BaudRate = 57600; // Usart 의 BaudRate를 57600 으로 설정
    USART_InitStructure.USART_WordLength = USART_WordLength_8b; // WordLength를 8b로 설정
    USART_InitStructure.USART_StopBits = USART_StopBits_1;    //Usart Stop bit을 1 로 설정
    USART_InitStructure.USART_Parity = USART_Parity_No;       // 패리티 설정
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; // Rx와 Tx SET
    USART_Init(USART1, &USART_InitStructure);      // USART1 초기화
    USART_Cmd(USART1, ENABLE);
    // Rx Not empty interrupt enable
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);



    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600; // Usart 의 BaudRate를 57600 으로 설정
    USART_InitStructure.USART_WordLength = USART_WordLength_8b; // WordLength를 8b로 설정
    USART_InitStructure.USART_StopBits = USART_StopBits_1; //Usart Stop bit을 1 로 설정
    USART_InitStructure.USART_Parity = USART_Parity_No; // 패리티 설정
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; // Rx와 Tx SET
    USART_Init(USART2, &USART_InitStructure);         // USART2 초기화
    USART_Cmd(USART2, ENABLE);
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
}

void NVIC_Configuration(void){ // NVIC 설정

    NVIC_init.NVIC_IRQChannel = USART1_IRQn; //USART1 IRQ 설정
    NVIC_init.NVIC_IRQChannelPreemptionPriority = 0x00;    // IRQ 우선 페리티비트 0으로 설정
    NVIC_init.NVIC_IRQChannelSubPriority = 0x00;    // Sub 패리티 0으로 설정
    NVIC_init.NVIC_IRQChannelCmd = ENABLE; // IRQ Channel command enable
    NVIC_Init(&NVIC_init);             // IRQ 초기화

    NVIC_init.NVIC_IRQChannel = USART2_IRQn; //USART2 IRQ 설정
    NVIC_init.NVIC_IRQChannelPreemptionPriority = 0x00;    //IRQ 우선 패리티비트 0으로 설정
    NVIC_init.NVIC_IRQChannelSubPriority = 0x00;     //Sub 패리티 0으로 설정
    NVIC_init.NVIC_IRQChannelCmd = ENABLE;       // IRQ Channel command enable
    NVIC_Init(&NVIC_init);             // IRQ 초기화
}

void USART1_IRQHandler(void){          //USART1 인터럽트 리퀘스트 핸들러
    char receive_data;      // 데이터 저장용

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
    {
        receive_data = USART_ReceiveData(USART1) & 0xFF; //전송받은 데이터를 저장
        USART_SendData(USART1, receive_data); //USART1으로 데이터 전송
        USART_SendData(USART2, receive_data);       //USART2로 데이터 전송
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET );

        USART_ClearITPendingBit(USART1, USART_IT_RXNE);   // USART1 PendingBit Clear
    }



}

void USART2_IRQHandler(void){   // USART2 인터럽트 리퀘스트 핸들러

    char receive_data;      //받은 데이터 저장용

    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
    {
        receive_data = USART_ReceiveData(USART2) & 0xFF;   //받은 데이터 저장
        USART_SendData(USART1, receive_data);         //데이터를 USART1으로 전송
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET );
        USART_ClearITPendingBit(USART2, USART_IT_RXNE); //// USART2 PendingBit Clear
    }
}

int main(void){
    SystemInit();

    RCC_Configuration();      //RCC 레지스터 설정
    GPIO_Configuration();      //GPIO 래지스터 설정
    USART_Configuration();      // USART 설정
    NVIC_Configuration();      // NIVC 설정

    while(1){}
}
